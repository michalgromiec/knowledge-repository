# PutItem
* Creates or update (upsert) item
* update in full - source item are stored in full in dynamodb table

# UpdateItem
* edits existing item or adds a new item if it doesn't exist
* update only source attributes
* can be used to implement atomic counters

# Conditional Writes
* do a write/update/delete only if conditions are met
* helps with concurrent access to items

# GetItem
* read item on primary Key (HASH or HASH+RANGE)
* by default - eventually consistent read, option to use Strongly Consistent Read
* option ProjectionExpression - specifies attributes to return by dynamodb

# Query
* returns **list of items** based on
  * KeyConditionExpression - partition key exact value and sort key (equal, higher than, lower then, between, begins and other)
  * FilterExpression - additional filtering after the Query operation (can use non-key attributes)
  * return number of items specified in **Limit or up to 1MB of data**
  * ability to do pagination on the results
  
# Scan
* scan **entire table** and then filter out data, but **on the client side** (very inefficient)
* consumes a lot of RCU
* returns up to 1MB of data - pagination possible
* use case: export entire table
* can use ProjectionExpression & FilterExpression (but it doesn't have impact on very high RCU consumption)

# DeleteItem
* delete individual item
* conditional delete possible

# DeleteTable
* similar to sql truncate table
* deletes a whole table and all items without reading all items and deleting them one-by-one

# BatchWriteItem
* up to 25 PutItem and DeleteItem in one call
* up to 16MB of data written, up to 400KB of data per item
* reduces latency of API calls, but WCU consumption are the same
* not atomic as a whole, if some of items are rejected (i.e. because provisional throughput exceeded), failed operations returned in the `UnprocessedItems` response attribute.

# BatchGetItem
* return items from one or more tables
* returns up to 100 items, up to 16MB of data
* items retrieved in parallel to minimize latency
