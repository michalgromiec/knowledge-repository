# What are nosql databases
* non-relational databases, **distributed**
* examples: mongodb, dynamodb, cassandra
* do not support joins (or very limited support)
* do not support aggregation functions
* all data needed for query has to be in one record
* able to **scale horizontally**
* schema on write (able to store data without having to specify a fixed schema upfront)

# What is DynamoDB
DynamoDB is 
* fully managed no-sql database service, serverless, 
* highly available with replication across multiple AZs
* scales to massive workloads, distributed database
* able to perform millions of requests per seconds, trillions of row, TBs of storage
* fast and consistent in performance (low latency on retrieval)
* integrated with IAM for security, authorization and administration
* low cost and autoscaling capabilities

# DynamoDB basics
* dynamodb is made of Tables
* Table has a Primary Key (defined in front at creation time)
* Table can have infinite number of items (rows, records)
* Each Item has attributes (columns, fields, can be added over time thanks to write-on-schema)
* Maximum size of item is 400KB
* Supported data types:
  * scalar types: string, number, minary, boolean, null
  * document types: list, map
  * set types: string set, number set, binary set
* as a nosql database, doesnt contain constraints like not, foreign key, unique index etc

## DynamoDB primary key
As you have to define primary key on table creation, you have to choose the best one primary key.

You should choose field with the highest cardinality and not to choose skewed distributed field.
Primary key has to be not-null.

### Partition Key (HASH)
Like in rdbs, primary key must be unique for each item

### Partition Key + Sort Key (HASH+RANGE)
The combination of partition key and sort key must be unique for each item (so partition key must be repeated for more than one item)
Example: user and game with highscores.

## Table class
* standard = default
* standard-ia = infrequently accessed, cost optimized

## Use cases in Bigdata world
* mobile apps, gaming
* digital ad serving
* live voting
* audience interaction for live events
* sensor networks
* log ingestion
* metadata storage for amazon S3 objects
* web session management
* in general - for small hot data

Antipattern:
* need of relation joins
* blob data
* complex transactions
* low i/o rate