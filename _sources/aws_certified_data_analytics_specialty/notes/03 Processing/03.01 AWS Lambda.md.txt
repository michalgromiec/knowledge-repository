# What is it
Serverless solution for running custom code 

* it scales countinously without any settings
* it is a way for running the code without creating EC2 instances
* the main purpose is to run the code, so you have limited or even no access to server running this part of code
* it's a classic example of FaaS (function as a service)
* one of the most important feature of AWS Lambda is pay-as-you-go. Created lambda, which is not being executed, doesn't generate costs.
* costs are based on memory usage and execution length, therefore Lambda do their job the best when there is a huge amount of short timed executions to do
* it integrates with a lot of other AWS services, both as a triggers (events when Lambda is executed) and as a targets (events executed after Lambda finishes work)
* what's more, as it's a pure code, it can write or read from many other tools, not only aws services
* use cases:
  * processing and enriching data within data interfaces (both stream and minibatches)
  * processing objects (i.e. objects in S3 bucket)
  * serverless websites
  * similar to cron job can schedule small jobs which needed to be run periodically (small because of its execution limits)
  * ETL, but triggered based on events not scheduled (file came to S3 - run ETL process)
  * data warehouse ingestion (multiple targets - redshift, dynamodb, s3, again based on event not on schedule time)
  * alert monitoring
  * machine learning models serving
  * process AWS events
  * microservices architecture
  * "glue between services"

# Stateless
Lambda is stateless - it means lambda doesn't have any state data inside execution of code.

To have some state values, you can use i.e. dynamodb tables in which you can leave state

# Limits
* Lambda exeuction can last maximum 900 seconds (15 minutes)
* lambda maximum memory - depends on execution timeout setup, if can be maximum 3GB ram when timeout is 15 minutes
* maximum number of function invocations for single function - 1000 per second
* maximum number of concurrent executions for single function - 1000 at any given time

# Supported languages
* node.js
* python
* java
* c#
* go
* powershell
* ruby

# Security
Lambda is working based on AWS role. If your lambda code need to access to other AWS artifacts, just add permissions for role on which lambda works.

This execution role create temporary credential and they works as a default AWS profile - therefore for example boto3 code doesn't need to insecure pass credentials as a plain text, it works on pre-created credentials.

# Cost model
* first 1 million of requests is free
* you pay for product of memory **allocated** in GB per duration of requests in seconds - it means one request which last 0.5 second and 128MB of RAM allocated is billed for 0.0625 GB-s
* one GB-s costs 0.0000166667 USD
* there is a cost of execution each request (no matter of size and duration) - 0.20USD/million requests
* example: code executed each minute with allocated 10GB of ram which lasts 5 seconds will costs 36.51USD/month

# Other Lambda promises/advantages
* no scheduled downtime
* code is retryied 3 times when error occurs
* high scalability (1000 concurrent executions per region, but can be lifted up by AWS on demand)
* high performance (function available in seconds, code is cached automatically...)

# Antipatterns
* long running applications -> use EC2 instead or (workaround) split and chain your Lambda's
* dynamic websites
* sstateful applications (but can work iwith DynamoDB or S3 to keep track of state)
